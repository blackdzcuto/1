const configCmd = {
  name: 'me',
  version: '1.1.1',
  hasPermssion: 0,
  credits: 'DC-Nam',
  description: 'Thi·∫øt l·∫≠p th√¥ng tin v·ªÅ b·∫°n',
  commandCategory: 'ng∆∞·ªùi d√πng',
  usages: '< ...|setup|del|avatar >',
  cooldowns: 3
},
fse = require('fs'),
axios = require('axios'),
pathS = __dirname+'/cache/savedInfo.json',
streamURL = async url => (await axios.get(url, {
  responseType: 'stream'
})).data,
formInfo = {
  info: [
    ['T√™n'],
    ['Ng√†y Sinh']
  ]};

function swapInArray(a, x, y) {
  b = a[x]
  a[x] = a[y]
  a[y] = b;
  return a;
};

function upperFirstLetter(content) {
  return content.split(' ').map(el=> {
    el = el.split('')
    if (!!el[0])el[0] = el[0].toUpperCase()
    return el.join('');
  }).join(' ')
};

function loadCmd() {
  if (!fse.existsSync(pathS)) fse.writeFileSync(pathS, '{"user":{}}');
};

async function runCmd(arg) {
  const {
    senderID: sid,
    threadID: tid,
    type,
    messageReply,
    mentions
  } = arg.event,
  id = type == 'message_reply'?messageReply.senderID: (tags = Object.keys(mentions), tags != 0)?tags[0]: sid,
  prefix = arg.event.args[0][0],
  out = (a, b, c, d) => arg.api.sendMessage(a, b?b: tid, c?c: null, d?d: arg.event.messageID),
  dataInfo = JSON.parse(fse.readFileSync(pathS)),
  first = prefix+configCmd.name;

  if (/^setup/.test(arg.args[0])) {
    if (!dataInfo.user[sid]) {
      dataInfo.user[sid] = formInfo;
      fse.writeFileSync(pathS, JSON.stringify(dataInfo, 0, 4))
    }
    return out(`=== INFO SETUP ==I\n\n${dataInfo.user[sid].info.map(($, i)=>`${i+1}. ${$[0]}: ${$[1] || 'Ch∆∞a C√≥ D·ªØ Li·ªáu'}`).join('\n')}\n\n- ${first} [avatar/avt] {Link ·∫¢nh/Video} (Th√™m Avatar)\n- ${first} [del/reset] (X√≥a To√†n B·ªô Th√¥ng Tin)\n- {STT} -> {STT} (ƒê·ªïi v·ªã tr√≠)\n- {STT} {T√™n}: {N·ªôi Dung} (Th√™m ho·∫∑c s·ª≠a Th√¥ng Tin)\n- {STT} {N·ªôi Dung} (S·ª≠a N·ªôi Dung T√™n)\n- {STT} (G·ª° Th√¥ng Tin)`, null, (err, res)=>(res.chooses = 'setup', res.name = configCmd.name, res.author = sid, client.handleReply.push(res)));
  };

  if (!dataInfo.user[id]) return out(sid != id?'[ ùêàùêçùêÖùêé ] ‚Ä¢ ùó°ùó¥ùòÇÃõùóºÃõÃÄùó∂ ùó±ùòÇÃÄùóªùó¥ ùóªùóÆÃÄùòÜ ùó∞ùóµùòÇÃõùóÆ ùó∞ùóºÃÅ ùòÅùóµùóºÃÇùóªùó¥ ùòÅùó∂ùóª ùòÅùóøùóºùóªùó¥ ùóµùó≤Ã£ÃÇ ùòÅùóµùóºÃÇÃÅùóªùó¥': `[ ùêàùêçùêÖùêé ] ‚Ä¢ ùóïùóÆÃ£ùóª ùó∞ùóµùòÇÃõùóÆ ùó∞ùóºÃÅ ùòÅùóµùóºÃÇùóªùó¥ ùòÅùó∂ùóª, ùó±ùòÇÃÄùóªùó¥ "${prefix}${configCmd.name} setup" ùòÉùóÆÃÄ ùòÅùóµùó≤ÃÇùó∫ ùòÅùóµùóºÃÇùóªùó¥ ùòÅùó∂ùóª ùó∞ùòÇÃâùóÆ ùó∫ùó∂ÃÄùóªùóµ ùóªùóµùó≤ÃÅ`);

  if (/^(avatar|avt)/.test(arg.args[0])) {
    if (!/^https:\/\/[^]+\.(png|jpg|jpge|JPGE|gif|mp4)$/.test(arg.args[1])) return out(`[ ùêàùêçùêÖùêé ] ‚Ä¢ ùóñùóµùó∂Ãâ ùóªùóµùóÆÃ£ÃÇùóª ùóπùó∂ùóªùó∏ ùóÆÃâùóªùóµ (ùó∑ùóΩùó¥, ùó∑ùóΩùó¥ùó≤, ùóΩùóªùó¥, ùó¥ùó∂ùó≥)`);
    dataInfo.user[sid].avatar = arg.args[1];
    fse.writeFileSync(pathS, JSON.stringify(dataInfo, 0, 4));
    return out(`[ ùêàùêçùêÖùêé ] ‚Ä¢ ùóßùóµùó≤ÃÇùó∫ ùóÆùòÉùóÆùòÅùóÆùóø ùòÅùóµùóÆÃÄùóªùóµ ùó∞ùóºÃÇùóªùó¥`);
  };

  if (/^(del|reset)/.test(arg.args[0])) {
    delete dataInfo.user[sid];
    fse.writeFileSync(pathS, JSON.stringify(dataInfo, 0, 4));
    return out(`[ ùêàùêçùêÖùêé ] ‚Ä¢ ùó´ùóºùóÆÃÅ ùòÅùóµùóÆÃÄùóªùóµ ùó∞ùóºÃÇùóªùó¥ ùòÅùóºùóÆÃÄùóª ùóØùóºÃ£ÃÇ ùòÅùóµùóºÃÇùóªùó¥ ùòÅùó∂ùóª ùó∞ùòÇÃâùóÆ ùóØùóÆÃ£ùóª`);
  };

  const msg = {};

  if ((avt = dataInfo.user[sid].avatar), !!avt) msg.attachment = await streamURL(avt);
  msg.body = "=== [ ùóúùó°ùóôùó¢ ùóôùóîùóñùóòùóïùó¢ùó¢ùóû ] ===\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n" +
  dataInfo.user[id].info.map(el => `- [${upperFirstLetter(el[0] || '')}]: ${el[1] || 'Ch∆∞a c√≥ d·ªØ li·ªáu'}`).join('\n');
  out(msg);
};

function reply(arg) {
  const {
    senderID: sid,
    threadID: tid,
    body
  } = arg.event,
  _ = arg.handleReply,
  prefix = arg.event.args[0][0],
  out = (a, b, c, d) => arg.api.sendMessage(a, b?b: tid, c?c: null, d?d: arg.event.messageID),
  dataInfo = JSON.parse(fse.readFileSync(pathS))

  if (sid != _.author)return;
  if (/^setup/.test(_.chooses)) {
    var txt = '',
    input = /\n/.test(body)? body.split('\n'): [body];
    for (const el of input) {
      if (/^[0-9] -> [0-9]$/.test(el)) {
        const a = el.split(' -> '),
        x = a[0],
        y = a[1]
        swapInArray(dataInfo.user[sid].info, x-1, y-1);
        txt += `- Di chuy·ªÉn v·ªã tr√≠ "${x}" qua "${y}"`;
      } else if (isNaN(el)) {
        const edit = el.split(/(^[^:]+:)/),
        index = (edit[1] || '').split(' ')[0]-1;
        let nameForm = (edit[1] || '').replace(/^[^ ]+/, '');

        if (/:$/.test(nameForm)) {
          if (!dataInfo.user[sid].info[index]) dataInfo.user[sid].info[index] = [];
          const newI = nameForm.replace(/:$/, '');
          dataInfo.user[sid].info[index][0] = (newI || '').trim();
          const content = (edit[2] || '').trim();
          if (!!content) {
            dataInfo.user[sid].info[index][1] = content;
            txt += `\n- C·∫≠p nh·∫≠t ngo·∫°i h√¨nh "${newI}" V·ªõi Th√¥ng Tin "${content}"`;
          } else {
            txt += `\n- C·∫≠p nh·∫≠t ngo·∫°i h√¨nh "${newI}"`;
          };

        } else {
          const content = el.replace(/^[^ ]+/, '');
          dataInfo.user[sid].info[el.split(' ')[0]-1][1] = (content || '').trim();;
          txt += `\n- C·∫≠p nh·∫≠t th√¥ng tin`
        };

      } else if (isFinite(el)) {
        const del = dataInfo.user[sid].info.splice(el-1, 1);
        txt += `\n- G·ª° th√¥ng tin "${del[0]}: ${del[1]}"`
      }
    };
    dataInfo.user[sid].info = dataInfo.user[sid].info.filter(el=>!!el);
    fse.writeFileSync(pathS, JSON.stringify(dataInfo, 0, 4))
    out(txt)
  };
};

module.exports = {
  config: configCmd,
  onLoad: loadCmd,
  run: runCmd,
  handleReply: reply
}